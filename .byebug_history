exit
merchants.count
merchants
exit
merchants
exit
items
exit
end
Merchant.last.invoices.count
Merchant.last(-1).invoices
Merchant.last(2).each {|m|m.invoices}
Merchant.last(2).invoices
Merchant.last.invoices
exit
Merchant.count
Merchant.offset(5).first(1)
Merchant.offset(5).first(1).invoices
Merchant.offset(5)first(1).invoices
Merchant.seventh.invoices
Merchant.sixth.invoices
Merchant.sisth.invoices
Merchant.fifth.invoices
Merchant.fourth.invoices
Merchant.third.invoices
Merchant.find(3).invoices
Merchant.count
Merchant.second.invoices
Merchant.first.invoices
items
exit
items
exit
items
exit
items
exit
items
exit
invoice_items_1.pluck(:id)
invoice_items_1
InvoiceItem.where(item_id: 90).count
item_list_1.first
item_list.first
Item.first.id
InvoiceItem.where(item_id: 1).count
InvoiceItem.where(item_id: 1)
InvoiceItem.count
InvoiceItems.countInvoiceItem.count
InvoiceItems.count
Item.count
items.count
exit
xit
Item.count
items
exit
items.count
items
exit
response.body
exit
Customer.first.invoices.first.merchant
exit
Customer.first.invoices.first
Customer.first.invoices.first.merchant
Customer.first.invoices.first.transactions
Customer.first.invoices.first.trnasactions
Customer.first.invoices.first
Invoice.first
Customer.first.invoices
Customer.first
Invoice.last.transactions
Invoice.first.transactions
inv.transactions
inv = Customer.first.invoices
in = Customer.first.invoices
i = Customer.first.invoices
Customer.first.invoices.first.transaction
Customer.first.invoices
Customer.invoices
exit
response.body
exit
response.body
exit
response.body
next
exit
Merchant.first.invoices
Merchant.invoices
Merchant.select("customers.*").joins(invoices: [:customer, :transactions]).where('transactions.result = ? AND merchants.id = ?', "success", id).group('customers.id').order('count(invoices.customer_id) DESC')
Merchant.select("customers.*").joins(invoices: [:customer, :transactions]).where('transactions.result = ? AND merchants.id = ?', "success", id).group('customers.id').order('count(invoices.customer_id) DESC').first
Merchant.favorite_customer(1)
Merchant.favorite_customer
Merchant.all
exit
Customer.find(822)
hash.key(max_value)
c
next
exit
Customer.find(customer_id)
hash.key(max_value)
hash
exit
hash.key(max_value)
hash.values.max
max_value
hash
exit
a
exit
a.values.max
a.max.key
a.max
a
exita
exit
total_revenue.first
total_revenue
exit
total_revenue
total_revenue.first
exittotal_revenue.first
exit
Merchant.revenue(date)
exit
Invoice.select("sum(invoice_items.quantity * invoice_items.unit_price)").joins(:invoice_items, :transactions).where('invoices.updated_at = ? AND transactions.result = ?', date, "success")
   27:             .joins(:invoice_items, :transactions)
exitInvoice.select("sum(invoice_items.quantity * invoice_items.unit_price)")
exit
Merchant.revenue(date)
date
exit
next
revenue_params
exit
next
revenue_params
params
exit
quantity
a
exit
a.pluck(:id)
a
a.count
exit
quantity
exit
quantity
next
merchant_params[:quantity].to_i
merchant_params[:quantity]
merchant_params
params
exit
item_params['quantity'].to_i
item_params['quantity']
item_params
params
exit
'exit
Invoiceexit
Invoice.where(merchant_id: Merchant.first.id)
Merchant.first.invoices
Merchant.firstinvoices
Merchant.first
Merchant.all
get "/api/v1/merchants/#{merchant_1.id}"
get "/api/v1/merchants/#{merchant_1.id}
merchant_1.id
merchant_id.id
response.body
exit
transactions.first['result']
transactions.first
next
JSON.parse(response.body)
exit
params
exit
customer['first_name']
customer[:first_name]
customer
customer_1
exit
customer['first_name']
exit
customer['first_name']
response.body
customer
exit
ci
c
exit
response
exit
response.body
respond_with Customer.find_by(customer_params)
Customer.find_by(customer_params)
params
customer_params
exit
request.headers
exit
request.headers
exit
response
exit
response.body
exit
JSON.parse(response.body)
response.body
response
respond_with Customer.find_by(customer_params)
Customer.find_by(customer_params)
params
exit
exir
response
get "/api/v1/customers/find?first_name=#{Customer.first.first_name}", {}, { "Accept" => "application/json" }
                                              { "Accept" => "application/json" }
                                              {},
get "/api/v1/customers/find?first_name=#{Customer.first.first_name}",
exit
response.status
exit
response.status
request.headers
request.header
request.headers["REQUEST_URI"]
response
exit
Customer.first
Customer.all
Customer.count
request.headers["REQUEST_URI"]
exit
request.headers["REQUEST_URI"]
response
exit
request.headers["REQUEST_URI"]
response
exit
request.headers["REQUEST_URI"]
request
response
exit
request.headers["REQUEST_URI"]
request
exit
request.headers["REQUEST_URI"]
request.headers['url']
request.headers.url
